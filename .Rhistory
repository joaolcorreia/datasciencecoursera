dt <- qplot(date, price, data=df, geom="line") + theme(aspect.ratio = 1/4)
library(scales) # to access breaks/formatting functions
dt + scale_x_date()
df <- m[order(m$yearMonth)
)
df <- m[order(m$yearMonth),]
df
dt <- qplot(date, price, data=df, geom="line") + theme(aspect.ratio = 1/4)
dt
dt <- qplot(yearMonth, transactionRevenue, data=df, geom="line") + theme(aspect.ratio = 1/4)
dt
dt + scale_x_date(labels = date_format("%m/%d"))
dt + scale_x_date(yearMonth = date_format("%m/%d"))
m
m$yearMonth<-as.Date(m$yearMonth,"%Y-%m-%d")
dt + scale_x_date(yearMonth = date_format("%m/%d"))
m$yearMonth<-as.Date(m$yearMonth,"%Y-%m-%d")
df <- m[order(m$yearMonth),]
dt <- qplot(yearMonth, transactionRevenue, data=df, geom="line") + theme(aspect.ratio = 1/4)
dt
dt <- qplot(yearMonth, transactionRevenue, data=df, geom="line") + theme(aspect.ratio = 1/4)
dt + scale_x_date()
dt <- qplot(yearMonth, transactionRevenue, data=m, geom="line") + theme(aspect.ratio = 1/4)
dt
m<-ga$getData(411703,  "2007-02-01", "2014-05-31",
metrics = "ga:transactionRevenue",
dimensions="ga:yearMonth")
## Convert yearMonth to year-month
m$yearMonth<-gsub("([0-9]{4})([0-9]{2})","\\1-\\2-01", m$yearMonth)
m$yearMonth<-as.Date(m$yearMonth,"%Y-%m-%d")
dt <- qplot(yearMonth, transactionRevenue, data=m, geom="line") + theme(aspect.ratio = 1/4)
dt
ggplot(c, aes(x=yearMonth, y=transactionRevenue)) +  scale_x_date(labels = date_format("%Y-%m-%d")) +geom_line()
?qplot
dt + scale_x_date(labels = date_format("%m/%d"))
dt + scale_x_date(labels = date_format("%m/%d"))
dt + scale_x_date(labels = date_format("%W"))
qplot(yearMonth, transactionRevenue, data=m, geom="line") + theme(aspect.ratio = 1/4)
dt + scale_x_date(labels = date_format("%W"), breaks = date_breaks("week"))
dt + scale_x_date(labels = date_format("%m"), breaks = date_breaks("month"))
dt + scale_x_date(labels = date_format("%m"), breaks = date_breaks("year"))
dt + scale_x_date(labels = date_format("%Y"), breaks = date_breaks("year"))
dt<-qplot(yearMonth, transactionRevenue, data=m, geom="line") + theme(aspect.ratio = 1/4)
dt + scale_x_date(labels = date_format("%b"), breaks = date_breaks("months"))
dt + scale_x_date(labels = date_format("%b"), breaks = date_breaks("2 months"))
dt + scale_x_date(labels = date_format("%Y %b"), breaks = date_breaks("2 months"))
dt + scale_x_date(labels = date_format("%Y"), breaks = date_breaks("2 months"))
dt + scale_x_date(labels = date_format("%b"), breaks = date_breaks("2 months"))
dt + scale_x_date(labels = date_format("%b"), breaks = date_breaks("6 months"))
dt + scale_x_date(labels = date_format("%b %y"), breaks = date_breaks("6 months"))
?qplot
dt + scale_x_date(labels = date_format("%b %y"), breaks = date_breaks("6 months"))
dt<-qplot(yearMonth, transactionRevenue, data=m, geom="line",main="Transaction Revenue") + theme(aspect.ratio = 1/4)
dt + scale_x_date(labels = date_format("%b %y"), breaks = date_breaks("6 months"))
dt<-qplot(yearMonth, transactionRevenue, data=m, geom="line",ylab="Revenue", xlab="", main="Transaction Revenue") + theme(aspect.ratio = 1/4)
dt + scale_x_date(labels = date_format("%b %y"), breaks = date_breaks("6 months"))
autoplot(dt)
dt<-qplot(yearMonth, transactionRevenue, data=m, geom="line",ylab="", xlab="", main="Transaction Revenue") + theme(aspect.ratio = 1/4)
dt<-dt+ scale_x_date(labels = date_format("%b %y"), breaks = date_breaks("6 months"))
dt + scale_y_continuous(name="Revenue ($USD)")
fit<-stl(ts,s.window=12)
plot(fit)
fit
ts
fit
dd<-fit
dd
names(dd)
class(dd)
plot(fit)
ecomm<-ga$getData(411703,  "2007-02-01", "2014-05-31",
metrics = "ga:transactionRevenue",
dimensions="ga:yearMonth")
ts <- ts(ecomm$transactionRevenue, start=c(2007,2), end=c(2014,5), frequency=12)
require(xts)
plot(as.xts(ts), main="Blurb.com", xlab="Time", ylab="Revenue")
#Seasonal Component
plot(as.xts(fit$time.series[,1]), main="Seasonal Component", xlab="Time", ylab="Revenue" )
x <- rnorm(20)^2 * 10000000
layout(matrix(1:2, ncol = 2))
plot(x)
getOption("scipen")
opt <- options("scipen" = 20)
getOption("scipen")
plot(x)
opt <- options("scipen" = 20)
plot(as.xts(fit$time.series[,1]), main="Seasonal Component", xlab="Time", ylab="Revenue" )
?options
rm(opt)
plot(as.xts(fit$time.series[,1]), main="Seasonal Component", xlab="Time", ylab="Revenue" )
plot(as.xts(fit$time.series[,1]), main="Seasonal Component", xlab="Time", ylab="Revenue" )
plot(as.xts(fit$time.series[,1]), main="Seasonal Component", xlab="Time", ylab="Revenue" )
plot(as.xts(fit$time.series[,1]), main="Seasonal Component", xlab="Time", ylab="Revenue" )
plot(as.xts(fit$time.series[,1]), main="Seasonal Component", xlab="Time", ylab="Revenue" )
opt <- options("scipen" = 0)
plot(as.xts(fit$time.series[,1]), main="Seasonal Component", xlab="Time", ylab="Revenue" )
library("rga")
ga<-rga.open(instance="ga")
library("rga")
ga<-rga.open(instance="ga")
library("rga")
ga<-rga.open(instance="ga")
ecomm<-ga$getData(411703,  "2007-02-01", "2014-05-31",
metrics = "ga:transactionRevenue",
dimensions="ga:yearMonth")
ts <- ts(ecomm$transactionRevenue, start=c(2007,2), end=c(2014,5), frequency=12)
require(xts)
plot(as.xts(ts), main="Blurb.com", xlab="Time", ylab="Revenue")
require(xts)
plot(as.xts(ts), main="Blurb.com", xlab="Time", ylab="Revenue")
require(xts)
plot(as.xts(ts), main="Blurb.com", xlab="Time", ylab="Revenue",axes=FALSE)
axis(1)
axis(1)
axis(2)
axis(2)
axis(2, at = pts, labels = paste(pts, "MM", sep = ""))
axis(2, at = , labels = paste(pts, "MM", sep = ""))
require(xts)
plot(as.xts(ts), main="Blurb.com", xlab="Time", ylab="Revenue",axes=FALSE)
require(xts)
plot(as.xts(ts), main="Blurb.com", xlab="Time", ylab="Revenue")
#Seasonal Component
plot(as.xts(fit$time.series[,1]), main="Seasonal Component", xlab="Time", ylab="Revenue" )
ecomm<-ga$getData(411703,  "2007-02-01", "2014-05-31",
metrics = "ga:transactionRevenue",
dimensions="ga:yearMonth")
ts <- ts(ecomm$transactionRevenue, start=c(2007,2), end=c(2014,5), frequency=12)
require(xts)
plot(as.xts(ts), main="Blurb.com", xlab="Time", ylab="Revenue")
fit<-stl(ts,s.window=12)
plot(fit)
plot(as.xts(fit$time.series[,1]), main="Seasonal Component", xlab="Time", ylab="Revenue" )
seasonplot(ts,col=rainbow(10), main="Season Plot", year.labels=TRUE)
axis(1)
axis(as.Date(1))
seasonplot(ts,col=rainbow(10), main="Season Plot", year.labels=TRUE)
?seasonplot
seasonplot(ts,col=rainbow(10), main="Season Plot", year.labels=TRUE)
monthplot(ts, main="Month Plot for Time series", ylab="Time Series")
monthplot(fit$time.series[,"seasonal"], main="Month Plot for Seasonality", ylab="Seasonality")
monthplot(fit$time.series[,"seasonal"], main="Month Plot for Seasonality", ylab="")
plot(fit)
dt<-qplot(yearMonth, transactionRevenue, data=m, geom="line",ylab="", xlab="", main="Transaction Revenue") + theme(aspect.ratio = 1/4)
dt<-dt+ scale_x_date(labels = date_format("%b %y"), breaks = date_breaks("6 months"))
dt + scale_y_continuous(name="Revenue ($USD)")
m<-ga$getData(411703,  "2007-02-01", "2014-05-31",
metrics = "ga:transactionRevenue",
dimensions="ga:yearMonth")
## Convert yearMonth to year-month
m$yearMonth<-gsub("([0-9]{4})([0-9]{2})","\\1-\\2-01", m$yearMonth)
m$yearMonth<-as.Date(m$yearMonth,"%Y-%m-%d")
dt<-qplot(yearMonth, transactionRevenue, data=m, geom="line",ylab="", xlab="", main="Transaction Revenue") + theme(aspect.ratio = 1/4)
dt<-dt+ scale_x_date(labels = date_format("%b %y"), breaks = date_breaks("6 months"))
dt + scale_y_continuous(name="Revenue ($USD)")
plot(as.xts(fit$time.series[,1]), main="Seasonal Component", xlab="Time", ylab="Revenue" )
plot(as.xts(fit$time.series[,1]), main="Seasonal Component", xlab="Date", ylab="" )
plot(as.xts(fit$time.series[,1]), main="Seasonal Component", xlab="Date", ylab="",axis=false )
plot(as.xts(fit$time.series[,1]), main="Seasonal Component", xlab="Date", ylab="",axis=false )
plot(as.xts(fit$time.series[,1]), main="Seasonal Component", xlab="Date", ylab="",axis=FALSE )
plot(as.xts(fit$time.series[,1]), main="Seasonal Component", xlab="Date", ylab="",axes=false )
plot(as.xts(fit$time.series[,1]), main="Seasonal Component", xlab="Date", ylab="",axes=false )
plot(as.xts(fit$time.series[,1]), main="Seasonal Component", xlab="Date", ylab="")
plot(ts, col="grey", main="Seasonally Adjusted", xlab="", ylab="Revenue")
lines(seasadj(fit), col="red")
monthplot(fit$time.series[,"seasonal"], main="Month Plot for Seasonality", ylab="")
monthplot(ts, main="Month Plot for Time series", ylab="Time Series")
seasonplot(ts,col=rainbow(10), main="Season Plot", year.labels=TRUE)
plot(as.xts(ts), main="Blurb.com", xlab="", ylab="Revenue")
lines(as.xts(fit$time.series[,"trend"]), col="red")
?stl
file="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
f<-download.file(file,method="curl")
library(file)
library(download.file)
library("utils")
f<-download.file(file,method="curl")
?download.file
f<-download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv",method="curl")
f<-download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv","fle.csv",method="curl")
names(f)
read.table("fle.csv",HEADERS=TRUE)
?read.table
housing<-read.table("fle.csv",header=TRUE)
names(housing)
housing[VAL>100000,]
housing[,housing$VAL]
housing[housing$VAL,]
housing[,housing$VAL]
housing[housing$VAL]
housing[housing$VAL,]
housing[housing$VAL==24,]
housing[housing$VAL=24,]
housing[housing$VAL==bb,]
housing[housing$VAL==24,]
names(housing)
housing<-read.table("fle.csv",header=TRUE,stringAsFactors=FALSE)
housing<-read.table("fle.csv",header=TRUE,stringsAsFactors=FALSE)
names(housing)
housing[housing$VAL==bb,]
housing[housing$VAL,]
housing[,housing$VAL]
housing[,housing$VAL==bb]
housing[,housing$VAL=="bb"]
housing
head(housing)
housing<-read.table("fle.csv",header=TRUE,stringsAsFactors=FALSE, sep=",")
housing$VAL
housing$VAL==24
housing[housing$VAL==24,]
nrow(housing[housing$VAL==24,])
housing[housing$VAL=="01",]
housing[housing$VAL=="01"]
housing[,housing$VAL=="01"]
housing[VAL=="01"]
housing[VAL=="01",]
housing[,VAL=="01"]
housing[,housing$VAL=="01"]
housing[housing$VAL=="01",]
housing[housing$VAL=="24",]
housing<-read.table("fle.csv",sep=",",header=TRUE,stringsAsFactors=FALSE)
View(housing)
housing<-read.table("fle.csv",sep=",",header=TRUE,stringsAsFactors=FALSE,na.strings="0")
View(housing)
housing<-read.table("fle.csv",sep=",",header=TRUE,stringsAsFactors=FALSE)
housing[housing$VAL=="24",]
housing$VAL[housing$VAL=="24",]
housing$[housing$VAL=="24",]
names(housing)
housing$RT[housing$VAL=="24",]
housing[housing$VAL=="24",]
housing[housing$VAL=="24",housing$RT]
housing[housing$VAL=="24",]
housing[housing$VAL=="24",1]
housing[housing$VAL=="24",2]
housing[housing$VAL=="24",3]
housing[housing$VAL=="24",4]
housing[housing$VAL=="24",]
housing[housing$VAL=="24",VAL]
housing[housing$VAL=="24","VAL"]
1m<-(housing[housing$VAL=="24","VAL"])
mhomes<-(housing[housing$VAL=="24","VAL"])
mhomes
is.na(mhomes)
bad<-is.na(mhomes)
mhomes[!bad]
count(mhomes[!bad])
nrow(mhomes[!bad])
mhomes[!bad]
mhomes[!bad]
?count
length(mhomes[!bad])
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx",dest.xlsx,method="curl")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx","dest.xlsx",method="curl")
library(xlsx)
install.packages(xlsx)
install.packages("xlsx")
library(xlsx)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx","dest.xlsx",method="curl")
library("xlsx")
read.xlsx("dest.xlsx","1",colIndex=c(7:15), rowIndex=c(18:23))
read.xlsx("dest.xlsx",colIndex=c(7:15), rowIndex=c(18:23))
read.xlsx("dest.xlsx",0,colIndex=c(7:15), rowIndex=c(18:23))
s<-read.xlsx("dest.xlsx",0,colIndex=c(7:15), rowIndex=c(18:23))
dat<-read.xlsx("dest.xlsx",0,colIndex=c(7:15), rowIndex=c(18:23))
dat<-read.xlsx("dest.xlsx",0,colIndex=7:15, rowIndex=18:23)
dat<-read.xlsx("dest.xlsx",0,colIndex="7:15", rowIndex="18:23")
dat<-read.xlsx("dest.xlsx","NGAP Sample Data",colIndex="7:15", rowIndex="18:23")
dat<-read.xlsx("dest.xlsx","NGAP Sample Data",rowIndex="7:15", colIndex="18:23")
dat<-read.xlsx("dest.xlsx","NGAP Sample Data",colIndex="7:15", rowIndex="18:23")
?read.xlsx
dat<-read.xlsx("dest.xlsx","NGAP Sample Data",colIndex='7:15', rowIndex='18:23')
dat<-read.xlsx("dest.xlsx","NGAP Sample Data",colIndex=7:15, rowIndex=18:23)
dat<-read.xlsx("dest.xlsx",1,colIndex=7:15, rowIndex=18:23)
date
dat
sum(dat$Zip*dat$Ext,na.rm=T)
library("XML")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml","dest.xml",method="curl")
f<-xmlTreeParse("dest.xml",useinternal=TRUE)
f<-xmlTreeParse("dest.xml",useinternal=TRUE)
?xmlTreeParse
f<-xmlTreeParse("dest.xml",useInternalNodes = TRUE)
f
rootnode<-xmlroot(f)
rootnode<-XML::.__C__ExternalReference
f<-xmlTreeParse("dest.xml",useInternal = TRUE)
library("XML")
library("xPath")
names(f)
rootnode<-xmlRoot(f)
rootnode
xmlSApply(rootnode,//zipcode)
xmlSApply(rootnode,zipcode)
xmlSApply(rootnode,row[@zipcode='22'])
xmlSApply(rootnode,"row[@zipcode='22']")
xmlSApply(rootnode,//row[@zipcode='22'])
xmlSApply(rootnode,//row,xmlValue)
xmlSApply(rootnode,"//row",xmlValue)
xmlSApply(rootnode,"//zipcode",xmlValue)
xmlSApply(rootnode,"//zipcode")
xmlSApply(rootnode,xmlValue)
xmlSApply(rootnode,"//zipcode",xmlValue)
xmlSApply(rootnode,xmlValue)
xmlSApply(rootnode,"/row",xmlValue)
xmlSApply(rootnode,"//zipcode",xmlValue)
rootnode<-xmlRoot(f)
f
xmlSApply(rootnode,xmlValue)
xmlSApply(rootnode,"//price",xmlValue)
xmlSApply(rootnode,xmlValue)
xmlSApply(rootnode,"//price",xmlValue)
doc<-xmlTreeParse("dest.xml",useInternal = TRUE)
top = xmlRoot
doc = xmlTreeParse("dest.xml",useInternal = TRUE)
top = xmlRoot(doc)
xmlName(top)
names(top)
names(top[[1]])
names(f)
names(f[[1]])
f<-xmlTreeParse("dest.xml",useInternal = TRUE)
names(f[[1]])
top<-xmlRoot(f)
xmlName(top)
xmlName(top)
names(top)
names(top[[[1]]])
names(top[[1]])
names(top[[[ 1 ]]])
names(top[[[1]]])
names(top[[1]])
View(f)
names(top[[1]])
names(top[[2]])
names(top[[1]])
names(top[[1]])
names(top[[1]])
names(top[[1]])
top<-xmlRoot(top[[1]])
names(top[1])
names(top[[1]])
names(top[[[1]]])
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv","dt.csv",method="curl")
data.table("dt.csv",header=true)
library("data.table")
data.class
install.packages("data.table")
library("data.table")
data.table("dt.csv",header=true)
data.table("dt.csv",header=TRUE)
DT<-data.table("dt.csv",header=TRUE)
View(DT)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv","dt.csv",method="curl")
?data.table
?data.frame
?fread
DT<-fread("dt.csv")
mean(DT$pwgtp15,by=DT$SEX)
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time(rowMeans(DT)[DT$SEX==1])
system.time(DT[,mean(pwgtp15),by=SEX]
)
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(mean(DT[DT$SEX==1,]$pwgtp15)
)
library("rga")
ga<-rga.open(instance="ga")
ecomm<-ga$getData(35658260,  "2010-08-01", "2014-06-30",
metrics = "ga:transactionRevenue",
dimensions="ga:yearMonth")
ecomm
ts <- ts(ecomm$transactionRevenue, start=c(2010,8), end=c(2014,6), frequency=12)
ts
plot(as.xts(ts), main="XXXXXX", xlab="Time", ylab="Revenue")
require(xts)
?require
library("xts")
plot(as.xts(ts), main="XXXXXX", xlab="Time", ylab="Revenue")
fit<-stl(ts,s.window=12)
plot(fit)
plot(as.xts(fit$time.series[,1]), main="Seasonal Component", xlab="Time", ylab="Revenue" )
plot(as.xts(fit$time.series[,1]), main="Seasonal Component", xlab="Time", ylab="" )
plot(as.xts(fit$time.series[,1]), main="Seasonal Component", xlab="Time", ylab="" )
plot(as.xts(fit$time.series[,1]), main="Seasonal Component", xlab="Time", yaxt='n' )
plot(as.xts(fit$time.series[,1]), main="Seasonal Component", xlab="Time", yaxt='n')
plot(as.xts(fit$time.series[,2]), main="Trend Component", xlab="Time", ylab="Revenue" )
plot(as.xts(fit$time.series[,1]), main="Seasonal Component", xlab="Time", yaxt='n')
plot(as.xts(fit$time.series[,2]), main="Trend Component", xlab="Time", ylab="Revenue", yaxt='n')
fit <- stl(elecequip, t.window=15, s.window="periodic", robust=TRUE)
plot(fit)
plot(as.xts(fit$time.series[,2]), main="Trend Component", xlab="Time", ylab="Revenue", yaxt='n')
plot(as.xts(fit$time.series[,2]), main="Trend Component", xlab="Time", ylab="Revenue")
fit <- stl(elecequip, t.window=15, s.window="periodic", robust=TRUE)
plot(fit)
fit <- stl(elecequip, t.window=15, s.window="periodic", robust=TRUE)
plot(fit)
fit<-stl(ts,s.window=12)
plot(fit)
plot(as.xts(fit$time.series[,1]), main="Seasonal Component", xlab="Time", yaxt='n')
plot(as.xts(fit$time.series[,2]), main="Trend Component", xlab="Time", ylab="Revenue")
plot(ts, col="grey", main="Seasonally Adjusted", xlab="", ylab="Revenue")
lines(seasadj(fit), col="red")
seasonplot(ts,col=rainbow(10), main="Season Plot", year.labels=TRUE)
library("fpp")
seasonplot(ts,col=rainbow(10), main="Season Plot", year.labels=TRUE)
plot(ts, col="grey", main="Seasonally Adjusted", xlab="", ylab="Revenue")
lines(seasadj(fit), col="red")
fit <- stl(elecequip, t.window=15, s.window="periodic", robust=TRUE)
plot(fit)
plot(as.xts(fit$time.series[,2]), main="Trend Component", xlab="Time", ylab="Revenue")
plot(ts, col="grey", main="Seasonally Adjusted", xlab="", ylab="Revenue")
lines(seasadj(fit), col="red")
plot(as.xts(fit$time.series[,2]), main="Trend Component", xlab="Time", ylab="Revenue", yaxt='n')
plot(ts, col="grey", main="Seasonally Adjusted", xlab="", ylab="Revenue")
lines(seasadj(fit), col="red")
library("fpp")
plot(ts, col="grey", main="Seasonally Adjusted", xlab="", ylab="Revenue")
lines(seasadj(fit), col="red")
plot(as.xts(ts), main="XXXXXX", xlab="Time", ylab="Revenue")
fit<-stl(ts,s.window=12)
plot(fit)
plot(ts, col="grey", main="Seasonally Adjusted", xlab="", ylab="Revenue")
lines(seasadj(fit), col="red")
seasonplot(ts,col=rainbow(10), main="Season Plot", year.labels=TRUE)
seasonplot(ts,col=rainbow(10), main="Season Plot", year.labels=TRUE)
monthplot(ts, main="Month Plot for Time series", ylab="Time Series")
## Graph with GGPLOT
m<-ga$getData(35658260,  "2007-02-01", "2014-05-31",
metrics = "ga:transactionRevenue",
dimensions="ga:yearMonth")
axis(side = 1)
marks <- c(0,20000,40000,60000,80000,100000)
axis(2,at=marks,labels=marks)
monthplot(ts, main="Month Plot for Time series", ylab="Time Series")
monthplot(ts, main="Month Plot for Time series", ylab="Time Series")
monthplot(fit$time.series[,"seasonal"], main="Month Plot for Seasonality", ylab="")
plot(ts, col="grey", main="Seasonally Adjusted", xlab="", ylab="Revenue")
lines(seasadj(fit), col="red")
plot(as.xts(ts), main="Blurb.com", xlab="", ylab="Revenue")
lines(as.xts(fit$time.series[,"trend"]), col="red")
axis(side = 1, tck = -.015, labels = NA)
axis(side = 2, tck = -.015, labels = NA)
axis(side = 1, lwd = 0, line = -.4)
axis(side = 2, lwd = 0, line = -.4, las = 1)
plot(as.xts(ts), main="Blurb.com", xlab="", ylab="Revenue")
lines(as.xts(fit$time.series[,"trend"]), col="red")
axis(side = 2, lwd = 0, line = -.4, las = 1)
plot(as.xts(ts), main="Blurb.com", xlab="", ylab="Revenue")
lines(as.xts(fit$time.series[,"trend"]), col="red")
axis(side = 2, tck = -.015, labels = NA)
options(scipen=999)
plot(as.xts(ts), main="Blurb.com", xlab="", ylab="Revenue")
lines(as.xts(fit$time.series[,"trend"]), col="red")
format(10000, big.mark=" ")
plot(as.xts(ts), main="Blurb.com", xlab="", ylab="Revenue")
lines(as.xts(fit$time.series[,"trend"]), col="red")
axis(2, big.mark=",", scientific=FALSE)
axis(2, big.mark=",", scientific=FALSE)
axis(2, at = y, labels = formatC(y, big.mark = " ", format = "d"), las=2)
axis(2, big.mark=",", scientific=FALSE)
axis(2, at = ts, labels = formatC(ts, big.mark = " ", format = "d"), las=2)
axis(2, at = ts, labels = formatC(ts, big.mark = " ", format = "d"))
m$yearMonth<-gsub("([0-9]{4})([0-9]{2})","\\1-\\2-01", m$yearMonth)
m$yearMonth<-as.Date(m$yearMonth,"%Y-%m-%d")
library(scales)
dt<-qplot(yearMonth, transactionRevenue, data=m, geom="line",ylab="", xlab="", main="Transaction Revenue") + theme(aspect.ratio = 1/4)
dt<-dt+ scale_x_date(labels = date_format("%b %y"), breaks = date_breaks("6 months"))
dt + scale_y_continuous(name="Revenue ($USD)")
library("scales")
library("ggplot2")
dt<-qplot(yearMonth, transactionRevenue, data=m, geom="line",ylab="", xlab="", main="Transaction Revenue") + theme(aspect.ratio = 1/4)
dt<-dt+ scale_x_date(labels = date_format("%b %y"), breaks = date_breaks("6 months"))
dt + scale_y_continuous(name="Revenue ($USD)")
# Plot visually the model with the TS
plot(as.xts(ts), main="Think Thank Photo", xlab="", ylab="Revenue")
lines(as.xts(f6$mean), col="red")
seasonplot(ts,col=rainbow(10), main="Season Plot", year.labels=TRUE)
options(scipen=999,99)
options(scipen=99)
seasonplot(ts,col=rainbow(10), main="Season Plot", year.labels=TRUE)
monthplot(fit$time.series[,"seasonal"], main="Month Plot for Seasonality", ylab="")
monthplot(fit$time.series[,"seasonal"], main="Month Plot for Seasonality", ylab="")
monthplot(fit$time.series[,"seasonal"], main="Month Plot for Seasonality", ylab="", yaxt='n')
monthplot(fit$time.series[,"seasonal"], main="Month Plot for Seasonality", ylab="", yaxt='n')
monthplot(ts, main="Month Plot for Time series", ylab="Time Series")
monthplot(ts, main="Month Plot for Time series", ylab="")
plot(as.xts(fit$time.series[,1]), main="Seasonal Component", xlab="Time", yaxt='n')
?stl
fit<-stl(ts,s.window=12)
plot(fit)
plot(as.xts(fit$time.series[,1]), main="Seasonal Component", xlab="Time", yaxt='n')
plot(as.xts(fit$time.series[,2]), main="Trend Component", xlab="Time", ylab="Revenue", yaxt='n')
plot(as.xts(fit$time.series[,2]), main="Trend Component", xlab="Time", ylab="", yaxt='n')
plot(ts, col="grey", main="Seasonally Adjusted", xlab="", ylab="Revenue")
lines(seasadj(fit), col="red")
seasonplot(ts,col=rainbow(10), main="Season Plot", year.labels=TRUE)
monthplot(ts, main="Month Plot for Time series", ylab="")
plot(as.xts(fit$time.series[,2]), main="Trend Component", xlab="Time", ylab="", yaxt='n')
# Trend over data
plot(ts, col="grey", main="Seasonally Adjusted", xlab="", ylab="Revenue")
lines(seasadj(fit), col="red")
plot(as.xts(ts), main="Trend over original", xlab="", ylab="")
lines(as.xts(fit$time.series[,"trend"]), col="red")
setwd("/Users/joaocorreia/Dropbox/Education/datasciencecoursera/")
getwd()
install.packages("RMySQL")
