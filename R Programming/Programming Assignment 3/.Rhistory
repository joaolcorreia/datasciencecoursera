levels(study[,1])
levels(study[,11])
levels(data[,11])
levels(data[,1])
data<-read.csv("outcome-of-care-measures.csv", colClasses = "character")
data<-subset(data,data$State=="WA")
data$State
study<-subset(data,data$State==state)
## Transform to numeric. NAs are introduced by coercion
study[,col]<-suppressWarnings(as.numeric(study[,col]))
## Create a cleaner dataframe
study<-data.frame(study$Hospital.Name,study[,col])
## Complete cases only
complete<-complete.cases(study)
study<-study[complete,]
# Order the column of study
n<-order(study[,2],study[,1])
study<-subset(data,data$State=="WA")
study[,col]<-suppressWarnings(as.numeric(study[,col]))
?complete.cases
complete<-complete.cases(study$Hospital.Name,study[,col])
nas<-is.na(study[,col])
nas
study2<-study[!nas]
study2<-study[!nas,]
View(study2)
nas<-is.na(study[,col])
study<-study[!nas,]
n<-order(study[,col],study$Hospital.Name)
n
study[,1][n][1]
study[,2][n][1]
study[,2][n][7]
## Rank Hospital by State
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data<-read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state is valid
states<-unique(data[,7])
if(state %in% states == FALSE) stop("invalid state")
## Validate outcome values: heart attack, heart failure or pneumonia
switch(outcome,
"heart attack" = col<-11,
"heart failure" = col<-17,
"pneumonia" = col<-23 )
## If no column is identified lets exit and tell the user
if (is.numeric(col) == FALSE)  stop("invalid outcome")
## Subset state of interest
study<-subset(data,data$State==state)
## Transform to numeric. NAs are introduced by coercion
study[,col]<-suppressWarnings(as.numeric(study[,col]))
## Remove NA's
nas<-is.na(study[,col])
study<-study[!nas,]
# Order the column of study
n<-order(study[,col],study$Hospital.Name)
## Rank for use of words best and worst
rank<-num
switch(num,
"best" = rank<-1,
"worst" = rank<-length(n))
## Return Top hospital name
if(num > length(n)) stop("NA")
return(study$Hospital.Name[n[rank]])
}
rankhospital("MD", "heart failure", 5)
submit()
data<-read.csv("outcome-of-care-measures.csv", colClasses = "character")
unique(data$State)
rankall <- function(outcome, num = "best") {
## Read outcome data
data<-read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Get all states values
states <- unique(data$State)
for (state in states) {
rankhospital(state, outcome, num)
}
}
rankall("MD", "heart failure", "best")
rankall("heart failure", "best")
rankall <- function(outcome, num = "best") {
## Read outcome data
data<-read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Get all states values
states <- unique(data$State)
for (state in states) {
rankhospital(state, outcome, num)
}
}
rankall("heart failure", "best")
rankall("MD", "heart failure", "best")
rankhospital("MD", "heart failure", 5)
df<-data.frame()
df
names(df)
df<-names(c("Hospital","State"))
names(df)
names(c("Hospital","State"))<-df
c("Hospital","State")<-names(df)
c("Hospital","State")<-names(df)
names(df)
names(df)<-c("Hospital","State")
df <- data.frame(Hospital=character(),State=character(), stringsAsFactors=FALSE)
names(df)
cbind(df,c("HH","hH"))
rbind(df,c("HH","hH"))
df
?rbind
rbind(df,"HH","hH")
df<-rbind(df,c("HH","hH"))
df
df
df <- data.frame(Hospital=character(),State=character(), stringsAsFactors=FALSE)
df<-rbind(df,c("HH","hH"))
df <- data.frame(Hospital=character(),State=character(), stringsAsFactors=FALSE)
rbind(df,c("HH","hH"))
rankall <- function(outcome, num = "best") {
## Validate outcome values: heart attack, heart failure or pneumonia
switch(outcome,
"heart attack" = col<-11,
"heart failure" = col<-17,
"pneumonia" = col<-23 )
## If no column is identified exit and tell the user
if (is.numeric(col) == FALSE) stop("invalid outcome")
## Read outcome data
data<-read.csv("outcome-of-care-measures.csv", colClasses = "character")
df <- data.frame(Hospital=character(),State=character(), stringsAsFactors=FALSE)
## Get all States
states <- unique(data$State)
for (state in states) {
## Subset state of interest
study<-subset(data,data$State==state)
## Transform to numeric. NAs are introduced by coercion
study[,col]<-suppressWarnings(as.numeric(study[,col]))
## Remove NA's
nas<-is.na(study[,col])
study<-study[!nas,]
# Order the column of study
n<-order(study[,col],study$Hospital.Name)
## Rank for use of words best and worst
rank<-num
switch(num,
"best" = rank<-1,
"worst" = rank<-length(n))
## Return Top hospital name
##if(num > length(n)) stop("NA")
hospital<-study$Hospital.Name[n[rank]]
t<-data.frame('Hospital'=hospital,'State'=state)
df<-rbind(df,t)
}
}
rankall(heart failure", "best")
rankall("heart failure", "best")
rankall <- function(outcome, num = "best") {
## Validate outcome values: heart attack, heart failure or pneumonia
switch(outcome,
"heart attack" = col<-11,
"heart failure" = col<-17,
"pneumonia" = col<-23 )
## If no column is identified exit and tell the user
if (is.numeric(col) == FALSE) stop("invalid outcome")
## Read outcome data
data<-read.csv("outcome-of-care-measures.csv", colClasses = "character")
df <- data.frame(Hospital=character(),State=character(), stringsAsFactors=FALSE)
## Get all States
states <- unique(data$State)
for (state in states) {
## Subset state of interest
study<-subset(data,data$State==state)
## Transform to numeric. NAs are introduced by coercion
study[,col]<-suppressWarnings(as.numeric(study[,col]))
## Remove NA's
nas<-is.na(study[,col])
study<-study[!nas,]
# Order the column of study
n<-order(study[,col],study$Hospital.Name)
## Rank for use of words best and worst
rank<-num
switch(num,
"best" = rank<-1,
"worst" = rank<-length(n))
## Return Top hospital name
##if(num > length(n)) stop("NA")
hospital<-study$Hospital.Name[n[rank]]
t<-data.frame('Hospital'=hospital,'State'=state)
df<-rbind(df,t)
}
return(df)
}
rankall("heart failure", "best")
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best") {
## Validate outcome values: heart attack, heart failure or pneumonia
switch(outcome,
"heart attack" = col<-11,
"heart failure" = col<-17,
"pneumonia" = col<-23 )
## If no column is identified exit and tell the user
if (is.numeric(col) == FALSE) stop("invalid outcome")
## Read outcome data
data<-read.csv("outcome-of-care-measures.csv", colClasses = "character")
df <- data.frame(Hospital=character(),State=character(), stringsAsFactors=FALSE)
## Get all States
states <- unique(data$State)
for (state in states) {
## Subset state of interest
study<-subset(data,data$State==state)
## Transform to numeric. NAs are introduced by coercion
study[,col]<-suppressWarnings(as.numeric(study[,col]))
## Remove NA's
nas<-is.na(study[,col])
study<-study[!nas,]
# Order the column of study
n<-order(study[,col],study$Hospital.Name)
## Rank for use of words best and worst
rank<-num
switch(num,
"best" = rank<-1,
"worst" = rank<-length(n))
## Return Top hospital name
##if(num > length(n)) stop("NA")
hospital<-study$Hospital.Name[n[rank]]
t<-data.frame('Hospital'=hospital,'State'=state)
df<-rbind(df,t)
}
n<-order(df$State,df$Hospital)
return(df[n])
}
head(rankall("heart attack", 20), 10)
df
data<-read.csv("outcome-of-care-measures.csv", colClasses = "character")
df <- data.frame(Hospital=character(),State=character(), stringsAsFactors=FALSE)
states <- unique(data$State)
for (state in states) {
## Subset state of interest
study<-subset(data,data$State==state)
## Transform to numeric. NAs are introduced by coercion
study[,col]<-suppressWarnings(as.numeric(study[,col]))
## Remove NA's
nas<-is.na(study[,col])
study<-study[!nas,]
# Order the column of study
n<-order(study[,col],study$Hospital.Name)
## Rank for use of words best and worst
rank<-num
switch(num,
"best" = rank<-1,
"worst" = rank<-length(n))
## Return Top hospital name
##if(num > length(n)) stop("NA")
hospital<-study$Hospital.Name[n[rank]]
t<-data.frame('Hospital'=hospital,'State'=state)
df<-rbind(df,t)
}
num<-20
for (state in states) {
## Subset state of interest
study<-subset(data,data$State==state)
## Transform to numeric. NAs are introduced by coercion
study[,col]<-suppressWarnings(as.numeric(study[,col]))
## Remove NA's
nas<-is.na(study[,col])
study<-study[!nas,]
# Order the column of study
n<-order(study[,col],study$Hospital.Name)
## Rank for use of words best and worst
rank<-num
switch(num,
"best" = rank<-1,
"worst" = rank<-length(n))
## Return Top hospital name
##if(num > length(n)) stop("NA")
hospital<-study$Hospital.Name[n[rank]]
t<-data.frame('Hospital'=hospital,'State'=state)
df<-rbind(df,t)
}
df
n<-order(df$State,df$Hospital)
n
df[n]
df[n,]
n<-order(df$State)
df[n,]
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("pneumonia", "worst"), 3)
df[n,]
row.names(df)<-df$State
df
row.names(df)<-df$State
View(df)
rankall <- function(outcome, num = "best") {
## Validate outcome values: heart attack, heart failure or pneumonia
switch(outcome,
"heart attack" = col<-11,
"heart failure" = col<-17,
"pneumonia" = col<-23 )
## If no column is identified exit and tell the user
if (is.numeric(col) == FALSE) stop("invalid outcome")
## Read outcome data
data<-read.csv("outcome-of-care-measures.csv", colClasses = "character")
df <- data.frame(Hospital=character(),State=character(), stringsAsFactors=FALSE)
## Get all States
states <- unique(data$State)
for (state in states) {
## Subset state of interest
study<-subset(data,data$State==state)
## Transform to numeric. NAs are introduced by coercion
study[,col]<-suppressWarnings(as.numeric(study[,col]))
## Remove NA's
nas<-is.na(study[,col])
study<-study[!nas,]
# Order the column of study
n<-order(study[,col],study$Hospital.Name)
## Rank for use of words best and worst
rank<-num
switch(num,
"best" = rank<-1,
"worst" = rank<-length(n))
## Return Top hospital name
##if(num > length(n)) stop("NA")
hospital<-study$Hospital.Name[n[rank]]
if (is.na(hospital) == TRUE) hospital<-"<NA>"
t<-data.frame('Hospital'=hospital,'State'=state)
df<-rbind(df,t)
}
row.names(df)<-df$State
# n<-order(df$State)
return(df)
}
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("pneumonia", "worst"), 3)
head(rankall("heart attack", 20), 10)
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best") {
## Validate outcome values: heart attack, heart failure or pneumonia
switch(outcome,
"heart attack" = col<-11,
"heart failure" = col<-17,
"pneumonia" = col<-23 )
## If no column is identified exit and tell the user
if (is.numeric(col) == FALSE) stop("invalid outcome")
## Read outcome data
data<-read.csv("outcome-of-care-measures.csv", colClasses = "character")
df <- data.frame(Hospital=character(),State=character(), stringsAsFactors=FALSE)
## Get all States
states <- unique(data$State)
for (state in states) {
## Subset state of interest
study<-subset(data,data$State==state)
## Transform to numeric. NAs are introduced by coercion
study[,col]<-suppressWarnings(as.numeric(study[,col]))
## Remove NA's
nas<-is.na(study[,col])
study<-study[!nas,]
# Order the column of study
n<-order(study[,col],study$Hospital.Name)
## Rank for use of words best and worst
rank<-num
switch(num,
"best" = rank<-1,
"worst" = rank<-length(n))
## Return Top hospital name
##if(num > length(n)) stop("NA")
hospital<-study$Hospital.Name[n[rank]]
if (is.na(hospital) == TRUE) hospital<-"<NA>"
t<-data.frame('Hospital'=hospital,'State'=state)
df<-rbind(df,t)
}
row.names(df)<-df$State
n<-order(df$Hospital)
return(df[n,])
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best") {
## Validate outcome values: heart attack, heart failure or pneumonia
switch(outcome,
"heart attack" = col<-11,
"heart failure" = col<-17,
"pneumonia" = col<-23 )
## If no column is identified exit and tell the user
if (is.numeric(col) == FALSE) stop("invalid outcome")
## Read outcome data
data<-read.csv("outcome-of-care-measures.csv", colClasses = "character")
df <- data.frame(Hospital=character(),State=character(), stringsAsFactors=FALSE)
## Get all States
states <- unique(data$State)
for (state in states) {
## Subset state of interest
study<-subset(data,data$State==state)
## Transform to numeric. NAs are introduced by coercion
study[,col]<-suppressWarnings(as.numeric(study[,col]))
## Remove NA's
nas<-is.na(study[,col])
study<-study[!nas,]
# Order the column of study
n<-order(study[,col],study$Hospital.Name)
## Rank for use of words best and worst
rank<-num
switch(num,
"best" = rank<-1,
"worst" = rank<-length(n))
## Return Top hospital name
##if(num > length(n)) stop("NA")
hospital<-study$Hospital.Name[n[rank]]
if (is.na(hospital) == TRUE) hospital<-"<NA>"
t<-data.frame('Hospital'=hospital,'State'=state)
df<-rbind(df,t)
}
row.names(df)<-df$State
n<-order(df$State)
return(df[n,])
}
head(rankall("heart attack", 20), 10)
submit()
rankall <- function(outcome, num = "best") {
## Validate outcome values: heart attack, heart failure or pneumonia
switch(outcome,
"heart attack" = col<-11,
"heart failure" = col<-17,
"pneumonia" = col<-23 )
## If no column is identified exit and tell the user
if (is.numeric(col) == FALSE) stop("invalid outcome")
## Read outcome data
data<-read.csv("outcome-of-care-measures.csv", colClasses = "character")
df <- data.frame(hospital=character(),state=character(), stringsAsFactors=FALSE)
## Get all States
states <- unique(data$state)
for (state in states) {
## Subset state of interest
study<-subset(data,data$State==state)
## Transform to numeric. NAs are introduced by coercion
study[,col]<-suppressWarnings(as.numeric(study[,col]))
## Remove NA's
nas<-is.na(study[,col])
study<-study[!nas,]
# Order the column of study
n<-order(study[,col],study$Hospital.Name)
## Rank for use of words best and worst
rank<-num
switch(num,
"best" = rank<-1,
"worst" = rank<-length(n))
## Return Top hospital name
##if(num > length(n)) stop("NA")
hospital<-study$Hospital.Name[n[rank]]
if (is.na(hospital) == TRUE) hospital<-"<NA>"
t<-data.frame('hospital'=hospital,'state'=state)
df<-rbind(df,t)
}
row.names(df)<-df$State
n<-order(df$state)
return(df[n,])
}
submit()
submit()
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best") {
## Validate outcome values: heart attack, heart failure or pneumonia
switch(outcome,
"heart attack" = col<-11,
"heart failure" = col<-17,
"pneumonia" = col<-23 )
## If no column is identified exit and tell the user
if (is.numeric(col) == FALSE) stop("invalid outcome")
## Read outcome data
data<-read.csv("outcome-of-care-measures.csv", colClasses = "character")
df <- data.frame(hospital=character(),state=character(), stringsAsFactors=FALSE)
## Get all States
states <- unique(data$State)
for (state in states) {
## Subset state of interest
study<-subset(data,data$State==state)
## Transform to numeric. NAs are introduced by coercion
study[,col]<-suppressWarnings(as.numeric(study[,col]))
## Remove NA's
nas<-is.na(study[,col])
study<-study[!nas,]
# Order the column of study
n<-order(study[,col],study$Hospital.Name)
## Rank for use of words best and worst
rank<-num
switch(num,
"best" = rank<-1,
"worst" = rank<-length(n))
## Return Top hospital name
##if(num > length(n)) stop("NA")
hospital<-study$Hospital.Name[n[rank]]
if (is.na(hospital) == TRUE) hospital<-"<NA>"
t<-data.frame('hospital'=hospital,'state'=state)
df<-rbind(df,t)
}
row.names(df)<-df$state
n<-order(df$state)
return(df[n,])
}
head(rankall("heart attack", 20), 10)
submit()
submit()
submit()
pwr.t.test
library("pwr")
pwr.t.test
?pwr.t.test
pwr.t.test(d=0.20,sig.level=0.05)
pwr.t.test(n=0,d=0.20,sig.level=0.05)
pwr.t.test(n,d=0.20,sig.level=0.05)
pwr.t.test(pwr.t.test(d=0.2,n=60,sig.level=0.10,type="one.sample",alternative="two.sided")
d=0.20,sig.level=0.05)
pwr.t.test(d=0.2,n=60,sig.level=0.10,type="one.sample",alternative="two.sided")
pwr.t.test(d=0.10,sig.level=0.10,type="one.sample",alternative="two.sided")
pwr.t.test(d=0.3,power=0.75,sig.level=0.05,type="two.sample",alternative="greater")
pwr.t.test(d=0.1,power=0.95,sig.level=0.05,type="two.sample",alternative="greater")
